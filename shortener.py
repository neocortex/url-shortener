""" A simple URL-shortener that generates a short code from the radix-64
    representation of the last 32 bits of the MD5 digest of a given URL.

    Only the last 32 bits are used in order to make the code short (the
    resulting radix-64 representation is 6 characters long). I assume that the
    probability of exact match between any two URLs is at the margin of zero
    in those last bits.

    Alternatively, the short code could be just generated by taking a random
    sample of digits and ASCII characters (:func:`_get_alternative_short`).

"""
import base64
import md5
from pymongo import MongoClient
import random
from string import digits, ascii_letters

PREFIX = 'http://res.mio/'


class URLShortener:
    def __init__(self):
        self.db = MongoClient().url_db
        self.prefix = PREFIX

    def url2short(self, url):
        """ Generate a short code for a given URL, save it to the database
            (if not already there), and return the shortcode.

            :param url: The URL to be shortened.

        """
        short = self._get_short(url)
        item = self.db.urlcodes.find_one({'short': short})

        if item is None:
            self.db.urlcodes.insert({'url': url, 'short': short})
            return self.prefix + short
        elif item is not None and item['url'] == url:
            return self.prefix + short
        else:
            return None

    def short2url(self, short):
        """ Look up if short code is in database and return the corresponding
            URL, else None.

            :param short: The short code of the URL.

        """
        if short.startswith(self.prefix):
            short = short[len(self.prefix):]
        item = self.db.urlcodes.find_one({'short': short})
        if item is not None:
            return item['url']
        return None

    def _get_short(self, url, cutoff=4):
        """ Generate a short code for a given URL using the last bits of
            the base64-encode of the URL's MD5 digest.

            :param url: URL to be shortened.
            :param cutoff: Only the last 'cutoff' bytes of the digest are used.

        """
        # Base64-encode the MD5 digest of the URL
        short = base64.b64encode(md5.new(url).digest()[-cutoff:])
        # Remove radix-64 padding characters '='
        short = short.replace('=', '')
        # Replace reserved character '/' by underscore
        return short.replace('/', '_')

    def _alternative_get_short(self, length=5):
        """ Returns a random sample of digits and ascii letters as a string of
            length 5.
            This function is not currentlu used, but could replace
            :func:`_get_short`.

            :param length: Length of the sampled string.

        """
        sequence = random.sample(ascii_letters + digits, 5)
        return "".join(sequence)
